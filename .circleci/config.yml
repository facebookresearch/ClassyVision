# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2.1

# -------------------------------------------------------------------------------------
# Environments to run the jobs in
# -------------------------------------------------------------------------------------
cpu: &cpu
  machine:
    image: default
  resource_class: medium

gpu: &gpu
  machine:
    image: linux-cuda-11:2023.02.1
  resource_class: gpu.nvidia.small.multi  # NVIDIA Tesla T4 2 GPU 4 vCPUs 15 GB RAM (2 GPUs)



version_parameters: &version_parameters
  parameters:
    pytorch_index:
      type: string
      # use test wheels index to have access to RC wheels
      # https://download.pytorch.org/whl/test/torch_test.html
      default: "https://download.pytorch.org/whl/torch_stable.html"
    python_version: # NOTE: only affects linux
      type: string
      default: '3.10.6'
    cuda_version:
      type: string
      default: '11.6'
    TERM:
      type: string
      default: 'xterm'

  environment:
    PYTORCH_INDEX: << parameters.pytorch_index >>
    PYTHON_VERSION: << parameters.python_version>>
    CUDA_VERSION: << parameters.cuda_version >>
    TERM: << parameters.TERM >>

# -------------------------------------------------------------------------------------
# Re-usable commands
# -------------------------------------------------------------------------------------
setup_venv: &setup_venv
  - run:
      name: Activate Venv
      command: |
        python -m venv ~/venv
        echo ". ~/venv/bin/activate" >> $BASH_ENV
        . ~/venv/bin/activate
        python --version
        which python
        which pip

install_python: &install_python
  - run:
      name: Install Python
      working_directory: ~/
      command: |
        pyenv install << parameters.python_version >>
        pyenv global << parameters.python_version >>
        which python
        which pip

upgrade_pip_setuptools: &upgrade_pip_setuptools
  - run:
      name: Upgrade pip and setuptools
      working_directory: ~/
      command: |
        pip install --upgrade pip
        pip install --upgrade --progress-bar off setuptools

install_dep: &install_dep
  - run:
      name: Install Dependencies
      command: |
        pip install --progress-bar off -r requirements.txt
        pip list

setup_cuda: &setup_cuda
  - run:
      name: Setup CUDA
      working_directory: ~/
      command: |
        # download and install nvidia drivers, cuda, etc
        wget --quiet --no-clobber -P ~/nvidia-downloads 'https://pytorch-ci-utils.s3.us-east-2.amazonaws.com/nvidia-drivers/NVIDIA-Linux-x86_64-440.64.run'
        wget --quiet --no-clobber -P ~/nvidia-downloads 'https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin'
        wget --quiet --no-clobber -P ~/nvidia-downloads 'http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb'
        sudo cp ~/nvidia-downloads/cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600
        time sudo /bin/bash ~/nvidia-downloads/NVIDIA-Linux-x86_64-440.64.run --no-drm -q --ui=none
        time sudo dpkg -i ~/nvidia-downloads/cuda-repo-ubuntu1604-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb
        nvidia-smi

select_cuda: &select_cuda
  - run:
      name: Select CUDA
      command: |
        sudo update-alternatives --set cuda /usr/local/cuda-<< parameters.cuda_version >>

check_cuda_available: &check_cuda_available
  - run:
      name: Check CUDA Available
      command: python -c "import torch; assert torch.cuda.is_available(), 'CUDA not available'"

install_dep_bc: &install_dep_bc
  - run:
      name: Install Dependencies for testing backwards compatibility
      command: |
        which python
        which pip
        pip install --upgrade pip
        pip install --upgrade --progress-bar off setuptools
        pip install --progress-bar off -r requirements_test_bc.txt
        pip list

install_dev_dep: &install_dev_dep
  - run:
      name: Install Dev Dependencies
      command: |
        pip install .[dev]

pip_list: &pip_list
  - run:
      name: Pip list
      command: |
        pip list

run_tests: &run_tests
  - run:
      name: Run Tests
      command: |
        python setup.py test -s test.suites.unittests -v

# -------------------------------------------------------------------------------------
# Jobs to run
# -------------------------------------------------------------------------------------
jobs:
  cpu_tests:
    <<: *cpu
    <<: *version_parameters

    working_directory: ~/ClassyVision

    steps:
      - checkout

      - <<: *install_python

      - <<: *setup_venv

      - <<: *upgrade_pip_setuptools

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v9-cpu-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v9-cpu-dependencies-

      - <<: *install_dev_dep

      - <<: *install_dep

      - <<: *pip_list

      - save_cache:
          paths:
            - ~/venv
          key: v9-cpu-dependencies-{{ checksum "requirements.txt" }}

      - <<: *run_tests

      - run:
          name: Run classy-project tests
          command: |
            pip install .
            classy-project my-project
            pushd my-project
            ./classy_train.py --config configs/template_config.json
            popd
            rm -rf my-project

      - run:
          name: Check formatting
          working_directory: ~/ClassyVision/
          command: |
            bash ./scripts/formatter.sh


  gpu_tests:
    <<: *gpu
    <<: *version_parameters


    working_directory: ~/ClassyVision

    steps:
      - checkout

      # - <<: *setup_cuda
      - <<: *select_cuda

      - <<: *install_python

      - <<: *setup_venv

      - <<: *upgrade_pip_setuptools

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v6-gpu-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v6-gpu-dependencies-

      - <<: *install_dev_dep

      - <<: *install_dep

      - <<: *pip_list

      - <<: *check_cuda_available

      - save_cache:
          paths:
            - ~/venv
          key: v6-gpu-dependencies-{{ checksum "requirements.txt" }}

      - <<: *run_tests


  gpu_tests_bc:
    <<: *gpu
    <<: *version_parameters

    working_directory: ~/ClassyVision

    steps:
      - checkout

      # - <<: *setup_cuda
      - <<: *select_cuda

      - <<: *install_python

      - <<: *setup_venv

      - <<: *upgrade_pip_setuptools

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v3-gpu-bc-dependencies-{{ checksum "requirements_test_bc.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v3-gpu-bc-dependencies-

      - <<: *install_dev_dep

      - <<: *install_dep_bc

      - <<: *pip_list

      - <<: *check_cuda_available

      - save_cache:
          paths:
            - ~/venv
          key: v3-gpu-bc-dependencies-{{ checksum "requirements_test_bc.txt" }}

      - <<: *run_tests

# -------------------------------------------------------------------------------------
# Workflows
# -------------------------------------------------------------------------------------
workflows:
  version: 2
  build_and_test:
    jobs:
      - cpu_tests
      - gpu_tests
      - gpu_tests_bc
